<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blog | Elegant Development]]></title>
  <link href="http://tibsar.github.io/blog/categories/blog/atom.xml" rel="self"/>
  <link href="http://tibsar.github.io/"/>
  <updated>2015-07-13T14:49:54-04:00</updated>
  <id>http://tibsar.github.io/</id>
  <author>
    <name><![CDATA[Sara Tibbetts]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why You Should Keep a Technical Blog]]></title>
    <link href="http://tibsar.github.io/blog/why-you-should-keep-a-technical-blog/"/>
    <updated>2015-06-23T17:16:59-04:00</updated>
    <id>http://tibsar.github.io/blog/why-you-should-keep-a-technical-blog</id>
    <content type="html"><![CDATA[<p>Generally, when someone thinks of a technical person, the only writing they associate with that person is code.  However, that is far from the truth.  Technical blogs are common, and for good reason.  So if you're trying to figure out if a technical blog is right for you, check out why you should start blogging:</p>

<h3>To Practice Writing</h3>

<p>Going to an engineering school, it's pretty normal to hear someone use their technical ability as an excuse for their poor writing skills. I tend to find this ironic, since many of these people have an "I'm an engineer, I can do anything!" mentality.  The problem with their writing is not a lack of ability, but instead a lack of practice.  Do yourself a favor and do not become one of these people.  Future employers will thank you, teammates will thank you, you will thank you, and of course, I will thank you. Keeping a technical blog, or any blog, will give you the opportunity to practice writing, which leads to the next reason to keep a blog.</p>

<h3>To Practice Expressing Yourself</h3>

<p>Writing gives you the opportunity to put your thoughts on paper (or text editor).  Practicing this skill will make it easier to articulate your ideas and express them clearly.  You will develop the ability to show someone what you're thinking, rather than stumbling over your words as you try to express your thoughts.  This is extremely beneficial when working on a team, or even working on a personal project.</p>

<h3>To Learn</h3>

<p>Writing about a technical topic requires knowledge and understanding of that topic.  I have found that there are times that I know that I can loosely explain a topic, but the knowledge that the explanation was going to be posted to the web pushes me to strengthen my understanding of the topic.</p>

<h3>For Reference</h3>

<p>Is there something that you're always looking up?  Make a tutorial! Chances are, you'll remember it after writing about it, and even if you don't you know exactly where to find it when you need to reference it.  Also, there's probably many other people that are always looking up the same thing.  Not only are you helping yourself, but helping to better the internet as a whole, and who doesn't want that?</p>

<h3>For Getting Noticed</h3>

<p>If you keep your blog up to date, professional, and tag it well, you're going to get some traffic.  This can lead to job offers, making connections, and some fame in your field.  If you get enough traffic, you can even get paid by adding advertisements.  While this shouldn't be your sole reason for starting a blog, it is a factor to acknowledge.</p>

<h3>It's Free</h3>

<p>Why should you keep a technical blog? Why not! It's free, so you can't use that excuse. Like I said earlier, you can help better the internet as a whole, and do so for free.  So do it! Just do it! <em>Cue Shia LaBeouf</em></p>

<center><iframe width="560" height="315" src="https://www.youtube.com/embed/nuHfVn_cfHU" frameborder="0" allowfullscreen></iframe></center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customizing Your Octopress Blog]]></title>
    <link href="http://tibsar.github.io/blog/customizing-your-octopress-blog/"/>
    <updated>2015-06-12T16:51:24-04:00</updated>
    <id>http://tibsar.github.io/blog/customizing-your-octopress-blog</id>
    <content type="html"><![CDATA[<h2>Installing a New Theme</h2>

<p>When Octopress is first installed, the theme is rather bland.  Luckily, it isn't difficult to change this.  There are a decent amount of Octopress themes available, allowing for customization of the overall feel of your blog.  To find an Octopress theme, check out imathis's <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes" target = _blank>compilation</a>.  Once you pick out a theme, follow the theme's documentation in order to install it.  For the majority of themes, installation will follow the following template:
<code>sh
cd octopress
git submodule add git://github.com/CREATORS-USERNAME/THEME-NAME.git .themes/THEME-NAME
rake install['THEME-NAME']
rake generate
</code>
The GitHub url is the HTTPS clone URL, which can be found on the right hand side of GitHub.</p>

<h2>Adding Custom CSS</h2>

<p>One of the best ways to set your blog apart is to add custom CSS.  Navigate to your <code>octopress</code> folder. Once there, <code>ls</code> should reveal a <code>sass</code> folder.  Navigate into that folder, and then into the <code>custom</code> folder.  Next, find <code>_styles.css</code>.  Open this file in your text editor.  This is where you can put your custom CSS.  A basic CSS tutorial can be found <a href="http://www.w3schools.com/css/" target = _blank>here</a>.  If you're having trouble figuring out how to style a particular element, many browsers implement Inspect Element, which is great for determining the html used for that particular element.</p>

<h2>Changing the Default Colors</h2>

<p>You can take your styling further by changing the default colors used by the theme.  This is done in a similar manner as adding custom CSS.  In the same folder where <code>_styles.css</code> was found (<code>/octopress/sass/custom/</code>), you will find <code>_colors.css</code>.  Open this file using your text editor.  The file should be documented, explaining where to change the colors.  Finding the perfect color is easy with <a href="http://www.w3schools.com/tags/ref_colorpicker.asp" target = _blank>w3schools HTML Color Picker</a>.</p>

<h2>Setting Up Layouts</h2>

<p>Layouts are basically templates for your posts.  This makes it easy for you to have different designs, without having to manually set them up each time.  To add or modify layouts, navigate to your <code>octopress</code> folder.  Next, find and navigate to the <code>source</code> folder.  There you should find a <code>_layouts</code> folder with some predefined layouts.  You can modify any of the existing, or create your own by adding the html file to the <code>_layouts</code> folder.  Start off each layout with:</p>

<pre><code class="html">---
layout: LAYOUT_NAME
---
</code></pre>

<p>From there, add your custom code.  You can use the previously made layouts as a reference.</p>

<h2>Setting a Custom Favicon</h2>

<p>Changing the favicon is simple. Go back to the <code>source</code> folder (<code>/octopress/source/</code>).  There you will see <code>favicon.ico</code> or a similarly named .ico file.  Replace this file with your favicon, but make sure to keep the name of the file the same.  If you don't have a favicon yet, you can create one using a <a href="http://www.favicon.cc/" target=_blank>favicon generator</a>, make one from an image using a <a href="http://tools.dynamicdrive.com/favicon/" target=_blank>converter</a>, or find one using a <a href="http://www.freefavicon.com/freefavicons/objects/" target=_blank>favicon library</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Set Up a Custom Octopress Blog]]></title>
    <link href="http://tibsar.github.io/blog/how-to-set-up-a-custom-octopress-blog/"/>
    <updated>2015-06-11T13:37:02-04:00</updated>
    <id>http://tibsar.github.io/blog/how-to-set-up-a-custom-octopress-blog</id>
    <content type="html"><![CDATA[<p>Blogging is great for developers at any stage in their coding career. Today I'll be going over how set up an Octopress blog. Octopress is a static blogging framework that utilizes Jekyll.  Wait a minute. Let's break that down.</p>

<h3>Static</h3>

<p>A static web page is a page that does not change user to user.  The content that is displayed will be the same, no matter who views it.</p>

<h3>Blogging Framework</h3>

<p>A blogging framework allows a user to make changes to their blog with minimal coding.  The framework takes care of the major code, so that the user can create the content easily.</p>

<h3>Jekyll</h3>

<p>Jekyll is the underlying framework. Jekyll creates templates that are stored on your computer and used to build the web pages of your blog so that the server does not have to.  This allows the website to be loaded quickly.</p>

<p>Now that we've covered that, let's get started!</p>

<h1>Step 0 - Initial Setup</h1>

<p>If you haven't already, create a <a target=_blank href="https://github.com/">GitHub</a> account!  Don't worry about making a GitHub repository quite yet.  Next, create a local directory on your computer for your blog.  This should be someplace that you will remember easily, so that you can find it when you want to make a post.  Once you have that created, use the command line to get into that directory.  If you do not have experience with the command line, try out this <a target=_blank href="http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything">tutorial</a>.  Primarily focus on how to navigate directories.  You're also going to need a text editor.  I suggest <a target=_blank href="http://www.sublimetext.com/">Sublime Text</a>, but you can use any editor designed to edit plain text.</p>

<h1>Step 1 - Getting Octopress</h1>

<p>Once you are in the directory that you want your blog in, run the following commands using your command line:</p>

<pre><code class="sh">git clone git://github.com/imathis/octopress.git octopress
cd octopress
bundle install
</code></pre>

<p>In the above code snippit we are first cloning, or making a copy, of <a target=_blank href="https://github.com/imathis/">imathis</a>'s  repository, which is called <a target=_blank href="https://github.com/imathis/octopress">octopress</a>, from GitHub.  Then, we are moving into the octopress folder.  Next we are installing the ruby gems specified in the Gemfile.</p>

<h1>Step 2 - Getting Rake</h1>

<p>Rake allows us to automate tasks.  This makes many tasks related to our blog a lot easier.  In the command line, type the following command:</p>

<pre><code class="sh">rake install
</code></pre>

<p>Oh no! Did that throw an error? Don't worry! If that didn't work for you, enter the following commands:</p>

<pre><code class="sh">bundle exec rake install
rake install
</code></pre>

<p>We've done a decent amount, so let's commit what we've done to git.</p>

<pre><code class="sh">git add -A
git commit -m "Creates and sets up my basic octopress blog"
</code></pre>

<p>The first command tells git to track all the new additions or deletions in the directory that we are currently in.  The next command commits these changes to git with a message.  The message can be anything, but it's best to describe what changes you are committing.</p>

<h1>Step 3 - Setting Up _config.yml</h1>

<p>It's time to view your files in your text editor. If you are using Sublime Text, you can do this by typing <code>sublime .</code>.  Once you have the directory open in a text editor, navigate to the <code>_config.yml</code> file.  You should see a block of code similar to the code below:</p>

<pre><code class="">title:                                  # Used in the header and title tags
subtitle:                               # A description used in the header
author:                                 # Your name, for RSS, Copyright, Metadata
description:                            # A default meta description for your site
</code></pre>

<p>Fill out each of these fields with information about your blog.  When you're done, it should look something like this, but with your information:
<code>
title: A Very Amazing Blog              # Used in the header and title tags
subtitle: Blogging With Octopress       # A description used in the header
author: Jane Doe                        # Your name, for RSS, Copyright, Metadata
description: A blog about Octopress     # A default meta description for your site
</code>
This was a big step, so let's commit to git again.
<code>sh
git add .
git commit -m "Configures _config.yml"
</code>
This time we used <code>git add .</code>, which will add all additions to git, but leave out any deletions.  We did not make any deletions, so this will not cause any problems at this point.  You could also use <code>git add -A</code>, which in this case would complete the same action.</p>

<h1>Step 4 - Hosting Octopress on GitHub</h1>

<p>We are going to be using <a target=_blank href="https://pages.github.com/">GitHub Pages</a> to host our blog.  First, create a new repository on GitHub called username.github.io.  Username should be replaced with your GitHub username. Make sure the check box that initializes the repository with a README is <em>UNCHECKED</em>.  Next, we are going to put our blog into the repository that we just created.  From the command line, enter the following command:
<code>sh
rake setup_github_pages
</code>
Next, you'll see:
<code>sh
Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.io.git')
           or 'https://github.com/your_username/your_username.github.io')
Repository url:
</code>
Go back to your repository on GitHub.  Find Quick Setup and set it to SSH.  Copy the URL provided and paste it into the your terminal.  The result should look something like this, with your information as the url.
<code>sh
Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.io.git')
           or 'https://github.com/your_username/your_username.github.io')
Repository url: git@github.com:tibsar/tibsar.github.io.git
</code>
<em>So what did we just do?</em></p>

<ul>
<li>The <code>url:</code> line in <code>_config.yml</code> was changed to contain the url of your blog</li>
<li>You were moved to a new <code>source</code> branch, where all editting of your blog will occur</li>
<li>You were given access to push your blog to GitHub</li>
</ul>


<p>Since we can now push our blog to GitHub, let's do that using <code>git push origin source</code>.</p>

<h1>Step 5 - Writing A Post</h1>

<p>You officially have a blog! That means it's time to make our first post. Go back to the command line and enter:
<code>sh
rake new_post["My First Post On Octopress"]
</code>
The string in quotes within the brackets is the title of the post.  You can make the title anything, but it should probably have something to do with the content of the post. Now, go back to your text editor.  Navigate to the <code>source/_posts/</code> folder.  This is where all of your posts will be stored.  Right now, there should only be one file, with the date and title of your post as the file name.  Open that file and find something along the lines of:</p>

<pre><code class="">---
  layout: post
  title: "My First Post On Octopress"
  date: 2014-04-28 13:03:17 -0400
  comments: true
  categories: 
---
</code></pre>

<p>You can add categories into the categories section that relate to your post.  To enter multiple categories, you can use the syntax <code>["cats", "octopress", "babies"]</code> The content of your post will go under the second <code>---</code>.  You can write anything here!  This is a Markdown file, so it has some pretty nifty features that you can find <a href="http://tibsar.github.io/blog/markdown-cheat-sheet/" target=_blank>here</a>. Since it's the first post, you may want to keep up tradition with "Hello world!"</p>

<pre><code class="">---
  layout: post
  title: "My First Post On Octopress"
  date: 2014-04-28 13:03:17 -0400
  comments: true
  categories: ["Octopress", "Hello World"]
---
Hello world!
</code></pre>

<p>If you want to see what your post is going to look like, before you deploy it, simply enter:
<code>sh
rake preview
</code>
This will start Octopress locally.  To see our blog, open a web browser and go to <code>localhost:4000</code>.  You can now see what your blog is going to look like! If you don't like the look, don't fret.  We will be going over how to customize your blog in another post.  When you are done previewing your blog, you can stop by hitting <code>ctrl + c</code> on your keyboard.</p>

<h1>Step 6 - Deploying</h1>

<p>Now that we have a post, we need to know how to get our blog online. Go back to the command line and enter:
<code>sh
rake generate
rake deploy
</code>
 Now, we should send all of our changes up to GitHub. Do you remember the commands from earlier?
<code>sh
git add -A
git commit -m "adds my first blog post and deploys my blog"
git push origin source
</code>
Congratulations, you now have an Octopress blog! Now test it out! Go to <code>username.github.io</code> in a web browser to see your newly deployed blog.  If you love your blog, but hate how it looks, checkout <a href="http://tibsar.github.io/blog/customizing-your-octopress-blog/" target=_blank>Customizing Your Octopress Blog</a>.</p>
]]></content>
  </entry>
  
</feed>
