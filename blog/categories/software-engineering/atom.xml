<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software Engineering | Elegant Development]]></title>
  <link href="http://tibsar.github.io/blog/categories/software-engineering/atom.xml" rel="self"/>
  <link href="http://tibsar.github.io/"/>
  <updated>2015-11-06T14:31:58-05:00</updated>
  <id>http://tibsar.github.io/</id>
  <author>
    <name><![CDATA[Sara Tibbetts]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Is Software?]]></title>
    <link href="http://tibsar.github.io/blog/what-is-software/"/>
    <updated>2015-08-04T12:38:37-04:00</updated>
    <id>http://tibsar.github.io/blog/what-is-software</id>
    <content type="html"><![CDATA[<p>Engineers build things. That's pretty much their job description. So what makes the product of software engineering any different than that of other engineering?  To really answer this question we need to look at the characteristics of software.</p>

<h1>1. Software is not manufactured</h1>

<p>Electrical engineers design circuit boards that are then manufactured.  Mechnanical engineers build machines that are then manufactured.  Biomedical engineers build medical devices that are then manufactured.  Software engineers build software that is then. . . Wait. How do we manufacture software?  The answer is simple: we don't.  Yes, software engineers design and build software, as other engineers design and build their products, but that software can't be manufactured since it's not a physical product.  This removes any of the quality issues that can arise when a product is manufactured, which is extremely beneficial to software engineering teams.</p>

<h1>2. Software doesn't wear out</h1>

<p>Software is not a physical product, so there's nothing physical to wear out over time.  Suppose I have a simple program that simulates a swing.</p>

<pre><code class="ruby">class SwingSet

  def initialize 
    puts "New swing set built!"
    @count = 0
  end 

  def swing 
    puts "Swinging forward. . ."
    puts "Swinging back. . . "
    @count += 1 
    puts "I've swung #{@count} times."
  end 
end 
</code></pre>

<p>Now suppose we want to play on our swing set.</p>

<pre><code class="irb">&gt; swing_set = SwingSet.new
New swing set built!
 =&gt; #&lt;SwingSet:0x007ffadc3172a0 @count=0&gt; 

&gt; swing_set.swing
Swinging forward. . .
Swinging back. . . 
I've swung 1 times.
 =&gt; nil 
</code></pre>

<p>Now we're really enjoying our brand new swing set, so we swing a lot. . .</p>

<pre><code class="irb">&gt; 10000000.times do
&gt;   swing_set.swing
&gt; end
Swinging forward. . .
Swinging back. . . 
I've swung 2 times.

. . .

Swinging forward. . .
Swinging back. . . 
I've swung 10000001 times.
 =&gt; 10000000 
</code></pre>

<p>Shouldn't the swing have worn out?  I suppose that's a silly example, but it illustrates my point.  A physical swing would wear out after that much use, software, on the other hand, has nothing physical to wear out.  Software can become outdated, but that's certainly not due to overuse.</p>

<h1>3. Software can be undone</h1>

<p>You've just designed the latest and greatest iPhone. You expect to be sold out by the end of the first day of sales. You manufacture them and they start to sell. You've sold over a million in the first 10 minutes. . . but none of them work.  Apparently, there was an error in the manufacturing and all the iPhones are defective. You need to find a new manufacturer and deal with angry customers, which costs a lot. What a mess.</p>

<p>Let's change the situation a bit.</p>

<p>You've just designed the latest and greatest feature for Facebook.  You roll it out to users and find out soon after that it has a major bug.  You immediately rollback (go back) to the last working version which undoes the last buggy deployment, all within a matter of minutes, costing you pennies.</p>

<p>All this is possible with version control, something that's pretty unique to software.  However, you have to make sure that your version control is being used properly in order for this to work.</p>

<h1>4. Software is endless</h1>

<p>In the swing set example mentioned earlier, I could have made the loop something like this:</p>

<pre><code class="irb">&gt; 10000000.times do
&gt;   SwingSet.new
&gt; end
</code></pre>

<p>Ten million swing sets would have been made in seconds.  That's just not possible in hardware.  Even if we had enough materials and millions of swing set factories, eventually we wouldn't be able to make anymore.  With software, we can just keep make swing sets. The code does not care. The only potential pitfall would be lack of memory, but that can always be fixed. Software can make millions of copies for free practically instantaneously.  That's definitely not a property of hardware.</p>

<h2>Conclusion</h2>

<p>Software is a product.  However, software is unique in many of its properties.  Because of this, building software is unlike building any other product.  The quality can increase dramatically in a short period of time because of the ability to test components and different methods of doing the same thing without needing a multitude of resources.  Furthermore, manufacturing is not a concern, which cuts out a huge cost of production.  At the end of the day, software's unique properties provide its developers with a multitude of opportunities at a low cost.</p>

<p><em>This post uses many concepts found in <a href="http://www.mhhe.com/engineering/pressman/" target="_blank">Software Engineering: A Practitioner's Approach</a> by Roger S. Pressman</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding the Universe]]></title>
    <link href="http://tibsar.github.io/blog/coding-the-universe/"/>
    <updated>2015-07-29T12:36:33-04:00</updated>
    <id>http://tibsar.github.io/blog/coding-the-universe</id>
    <content type="html"><![CDATA[<p>Space.  There's a reason that NASA and SpaceX are extremely selective with their employees.  This week I, along with three other Flatirons, have been working on a web application that would allow the user to see the stars that would be above them that night in their location.  So far it's a simple one page application that grabs the user's location when they go the site, crunches the numbers, and displays the result. Sounds simple right?  Wrong.</p>

<p>Well, not fully wrong.  But partially wrong. The code isn't that complicated.  Just a matter of passing around information from JavaScript to Rails and back again. That doesn't sound too hard, and it's really not.  But there's one problem. . . getting the information.</p>

<p><img class="left" src="http://s28.postimg.org/5odbge77x/VIIRS_4_Jan2012_708x432.jpg" width="370"> Well, not all the information is hard to collect.  Getting the user's location is simple.  Using that information is hard.  Think about it.  We have the earth, right.  And a person on that earth with a latitude and longitude.  And let's just say that person happens to be at <a href="http://flatironschool.com/" target="_blank">The Flatiron School</a>, which has a location of 40°42'19.3"N 74°00'50.2"W.  Suppose that very person decides to check out our website. As soon as they arrive their location information is collected using JavaScript.  An <a href="https://en.wikipedia.org/wiki/Ajax_(programming)" target="_blank">AJAX</a> call later, that information is available in a controller.  Let's take a step back.  We have the user's coordinates.  As far as stars are concerned, what does that give us?  Everything. At least, everything that we need from the user.</p>

<p><img class="right" src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Image_Tangent-plane.svg/2000px-Image_Tangent-plane.svg.png" width="200"> Our user wants to see the stars.  So let's listen to a popular piece of business advice and "give the user what they want".  How do we do that?  Well, we have their location. Let's think about how that relates to the stars in question.  The user can only see the stars that are above them at night.  For simplification purposes, let's say that the person can see the stars above the plane tangent to their location on the earth.  So how do we find what stars are above that plane given the person's latitude and longitude? <a href="http://www.mers.byu.edu/docs/reports/MERS9904.pdf" target="_blank">"Projecting an Arbitrary Latitude and Longitude onto a Tangent Plane"</a> by Ivan S. Ashcraft provides the mathematical formulas for finding the tangent plane given the information we have been provided with.  However, since we need to find the stars above, below, or on that plane, we only really need the normal (or perpendicular) vector to the plane.  Following Ashcraft's formulas we can get the i, j, and k components of that normal vector, which Ashcraft labels as A, B, and C.  Now that we have the normal vector, we need to adjust it to use the coordinate system that our stars use, the <a href="https://en.wikipedia.org/wiki/Galactic_coordinate_system" target="_blank">Galactic coordinate system</a>, which uses the sun as the center.  Because of the earth's orientation in comparison to the Galactic coordinate system, we need to rotate the normal by -240 degrees.  So we have the normal to the plane, but how do we figure out which stars are above that plane?</p>

<p>Finding out whether a star is above, below, or on the plane is simple, all we need to do is the dot product. For each star, we dot the coordinates with the i, j, and k components of the normal vector. This gives the following formula: <code>Ax + By + Cz</code>.  If the result of this formula is positive, we know that the star is above the plane and therefore visible at the location.  If the result is negative, the star is below the plane and not visible.  If the result is 0, the star is on the plane, which for this situation we'll consider not visible.  That wasn't too hard, now was it?</p>

<p>At the end of the day, the project wasn't too difficult.  However, conceptualizing what we needed to do to the data that we had to achieve our desired results was extremely difficult.  Especially with the added pressure of a week deadline.  However, by staying cool and taking things one step at a time, my group and I successfully finished <a href="http://lumensee.herokuapp.com/" target="_blank">LUMENsee</a>. Check it out!</p>
]]></content>
  </entry>
  
</feed>
