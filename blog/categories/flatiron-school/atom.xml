<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron School | Elegant Development]]></title>
  <link href="http://tibsar.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://tibsar.github.io/"/>
  <updated>2015-11-06T14:31:58-05:00</updated>
  <id>http://tibsar.github.io/</id>
  <author>
    <name><![CDATA[Sara Tibbetts]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Is Software?]]></title>
    <link href="http://tibsar.github.io/blog/what-is-software/"/>
    <updated>2015-08-04T12:38:37-04:00</updated>
    <id>http://tibsar.github.io/blog/what-is-software</id>
    <content type="html"><![CDATA[<p>Engineers build things. That's pretty much their job description. So what makes the product of software engineering any different than that of other engineering?  To really answer this question we need to look at the characteristics of software.</p>

<h1>1. Software is not manufactured</h1>

<p>Electrical engineers design circuit boards that are then manufactured.  Mechnanical engineers build machines that are then manufactured.  Biomedical engineers build medical devices that are then manufactured.  Software engineers build software that is then. . . Wait. How do we manufacture software?  The answer is simple: we don't.  Yes, software engineers design and build software, as other engineers design and build their products, but that software can't be manufactured since it's not a physical product.  This removes any of the quality issues that can arise when a product is manufactured, which is extremely beneficial to software engineering teams.</p>

<h1>2. Software doesn't wear out</h1>

<p>Software is not a physical product, so there's nothing physical to wear out over time.  Suppose I have a simple program that simulates a swing.</p>

<pre><code class="ruby">class SwingSet

  def initialize 
    puts "New swing set built!"
    @count = 0
  end 

  def swing 
    puts "Swinging forward. . ."
    puts "Swinging back. . . "
    @count += 1 
    puts "I've swung #{@count} times."
  end 
end 
</code></pre>

<p>Now suppose we want to play on our swing set.</p>

<pre><code class="irb">&gt; swing_set = SwingSet.new
New swing set built!
 =&gt; #&lt;SwingSet:0x007ffadc3172a0 @count=0&gt; 

&gt; swing_set.swing
Swinging forward. . .
Swinging back. . . 
I've swung 1 times.
 =&gt; nil 
</code></pre>

<p>Now we're really enjoying our brand new swing set, so we swing a lot. . .</p>

<pre><code class="irb">&gt; 10000000.times do
&gt;   swing_set.swing
&gt; end
Swinging forward. . .
Swinging back. . . 
I've swung 2 times.

. . .

Swinging forward. . .
Swinging back. . . 
I've swung 10000001 times.
 =&gt; 10000000 
</code></pre>

<p>Shouldn't the swing have worn out?  I suppose that's a silly example, but it illustrates my point.  A physical swing would wear out after that much use, software, on the other hand, has nothing physical to wear out.  Software can become outdated, but that's certainly not due to overuse.</p>

<h1>3. Software can be undone</h1>

<p>You've just designed the latest and greatest iPhone. You expect to be sold out by the end of the first day of sales. You manufacture them and they start to sell. You've sold over a million in the first 10 minutes. . . but none of them work.  Apparently, there was an error in the manufacturing and all the iPhones are defective. You need to find a new manufacturer and deal with angry customers, which costs a lot. What a mess.</p>

<p>Let's change the situation a bit.</p>

<p>You've just designed the latest and greatest feature for Facebook.  You roll it out to users and find out soon after that it has a major bug.  You immediately rollback (go back) to the last working version which undoes the last buggy deployment, all within a matter of minutes, costing you pennies.</p>

<p>All this is possible with version control, something that's pretty unique to software.  However, you have to make sure that your version control is being used properly in order for this to work.</p>

<h1>4. Software is endless</h1>

<p>In the swing set example mentioned earlier, I could have made the loop something like this:</p>

<pre><code class="irb">&gt; 10000000.times do
&gt;   SwingSet.new
&gt; end
</code></pre>

<p>Ten million swing sets would have been made in seconds.  That's just not possible in hardware.  Even if we had enough materials and millions of swing set factories, eventually we wouldn't be able to make anymore.  With software, we can just keep make swing sets. The code does not care. The only potential pitfall would be lack of memory, but that can always be fixed. Software can make millions of copies for free practically instantaneously.  That's definitely not a property of hardware.</p>

<h2>Conclusion</h2>

<p>Software is a product.  However, software is unique in many of its properties.  Because of this, building software is unlike building any other product.  The quality can increase dramatically in a short period of time because of the ability to test components and different methods of doing the same thing without needing a multitude of resources.  Furthermore, manufacturing is not a concern, which cuts out a huge cost of production.  At the end of the day, software's unique properties provide its developers with a multitude of opportunities at a low cost.</p>

<p><em>This post uses many concepts found in <a href="http://www.mhhe.com/engineering/pressman/" target="_blank">Software Engineering: A Practitioner's Approach</a> by Roger S. Pressman</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding the Universe]]></title>
    <link href="http://tibsar.github.io/blog/coding-the-universe/"/>
    <updated>2015-07-29T12:36:33-04:00</updated>
    <id>http://tibsar.github.io/blog/coding-the-universe</id>
    <content type="html"><![CDATA[<p>Space.  There's a reason that NASA and SpaceX are extremely selective with their employees.  This week I, along with three other Flatirons, have been working on a web application that would allow the user to see the stars that would be above them that night in their location.  So far it's a simple one page application that grabs the user's location when they go the site, crunches the numbers, and displays the result. Sounds simple right?  Wrong.</p>

<p>Well, not fully wrong.  But partially wrong. The code isn't that complicated.  Just a matter of passing around information from JavaScript to Rails and back again. That doesn't sound too hard, and it's really not.  But there's one problem. . . getting the information.</p>

<p><img class="left" src="http://s28.postimg.org/5odbge77x/VIIRS_4_Jan2012_708x432.jpg" width="370"> Well, not all the information is hard to collect.  Getting the user's location is simple.  Using that information is hard.  Think about it.  We have the earth, right.  And a person on that earth with a latitude and longitude.  And let's just say that person happens to be at <a href="http://flatironschool.com/" target="_blank">The Flatiron School</a>, which has a location of 40°42'19.3"N 74°00'50.2"W.  Suppose that very person decides to check out our website. As soon as they arrive their location information is collected using JavaScript.  An <a href="https://en.wikipedia.org/wiki/Ajax_(programming)" target="_blank">AJAX</a> call later, that information is available in a controller.  Let's take a step back.  We have the user's coordinates.  As far as stars are concerned, what does that give us?  Everything. At least, everything that we need from the user.</p>

<p><img class="right" src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Image_Tangent-plane.svg/2000px-Image_Tangent-plane.svg.png" width="200"> Our user wants to see the stars.  So let's listen to a popular piece of business advice and "give the user what they want".  How do we do that?  Well, we have their location. Let's think about how that relates to the stars in question.  The user can only see the stars that are above them at night.  For simplification purposes, let's say that the person can see the stars above the plane tangent to their location on the earth.  So how do we find what stars are above that plane given the person's latitude and longitude? <a href="http://www.mers.byu.edu/docs/reports/MERS9904.pdf" target="_blank">"Projecting an Arbitrary Latitude and Longitude onto a Tangent Plane"</a> by Ivan S. Ashcraft provides the mathematical formulas for finding the tangent plane given the information we have been provided with.  However, since we need to find the stars above, below, or on that plane, we only really need the normal (or perpendicular) vector to the plane.  Following Ashcraft's formulas we can get the i, j, and k components of that normal vector, which Ashcraft labels as A, B, and C.  Now that we have the normal vector, we need to adjust it to use the coordinate system that our stars use, the <a href="https://en.wikipedia.org/wiki/Galactic_coordinate_system" target="_blank">Galactic coordinate system</a>, which uses the sun as the center.  Because of the earth's orientation in comparison to the Galactic coordinate system, we need to rotate the normal by -240 degrees.  So we have the normal to the plane, but how do we figure out which stars are above that plane?</p>

<p>Finding out whether a star is above, below, or on the plane is simple, all we need to do is the dot product. For each star, we dot the coordinates with the i, j, and k components of the normal vector. This gives the following formula: <code>Ax + By + Cz</code>.  If the result of this formula is positive, we know that the star is above the plane and therefore visible at the location.  If the result is negative, the star is below the plane and not visible.  If the result is 0, the star is on the plane, which for this situation we'll consider not visible.  That wasn't too hard, now was it?</p>

<p>At the end of the day, the project wasn't too difficult.  However, conceptualizing what we needed to do to the data that we had to achieve our desired results was extremely difficult.  Especially with the added pressure of a week deadline.  However, by staying cool and taking things one step at a time, my group and I successfully finished <a href="http://lumensee.herokuapp.com/" target="_blank">LUMENsee</a>. Check it out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Low Self-Esteem? Try Coding]]></title>
    <link href="http://tibsar.github.io/blog/low-self-esteem-try-coding/"/>
    <updated>2015-07-26T20:13:09-04:00</updated>
    <id>http://tibsar.github.io/blog/low-self-esteem-try-coding</id>
    <content type="html"><![CDATA[<p>Learning to code leads to much more than just a practical life skill. Throughout my journey at the <a href="http://flatironschool.com/" target="_blank">Flatiron School</a> I've noticed an unexpected benefit to learning how to code.  At week nine I feel confident and ready to take on the world. Now don't get me wrong, I still have a lot to learn, but I'm already finding that I'll be in the middle of doing something, find that I don't like how I have to do it, and create a way to fix it.  For instance, I wanted to tweet news articles, but didn't want to do it manually.  I created a program for it.  I don't like the way my school's enrollment website looks.  I'm making a Chrome extension to change that.  At week 9 in my programming career I can take a simple problem and fix it.  Furthermore, I've been given the tools I need to improve my skills and be able to create anything.  All it takes is a computer and some practice.  That is powerful.</p>

<p>One of the best parts of learning to code is that it can be as cheap as you want or need it to be.  While I chose to go down the bootcamp path, many have not.  With many online resources, learning the basics of coding can be completely free.  If you want to start, check out these free websites:</p>

<ul>
<li><a href="http://codecademy.com/" target="_blank">Codecademy</a></li>
<li><a href="http://codeschool.com/" target="_blank">Code School</a></li>
<li><a href="http://teamtreehouse.com/" target="_blank">Treehouse</a></li>
</ul>


<p>Reading coding books is also a great way to learn to code.  I find that the best way to really understand what the code is doing is to read about it. There's plenty of free books available as well:</p>

<ul>
<li><a href="https://pine.fm/LearnToProgram/" target="_blank">Learn to Program</a></li>
<li><a href="http://learnrubythehardway.org/book/" target="_blank">Learn Ruby the Hard Way</a></li>
<li><a href="http://ruby-doc.com/docs/ProgrammingRuby/" target="_blank">Programming Ruby</a></li>
<li><a href="http://www.techotopia.com/index.php/Ruby_Essentials" target="_blank">Ruby Essentials</a></li>
<li><a href="http://ruby.bastardsbook.com/" target="_blank">Bastards Book of Ruby</a></li>
<li><a href="http://mislav.uniqpath.com/poignant-guide/" target="_blank">Why's Poignant Guide to Ruby</a></li>
</ul>


<p>I listed Ruby books since that's what I'm learning, but you can find an extensive list <a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md#ruby" target="_blank">here</a>.</p>

<p>I also highly suggest getting involved in the social aspect of programming.  It keeps it interesting and gives you lots of opportunities to learn something new, or think about something from a new point of view.  Some great communities to check out are:</p>

<ul>
<li><a href="https://www.facebook.com/groups/hackathonhackers/" target="_blank">Hackathon Hackers</a></li>
<li><a href="https://www.reddit.com/r/programming/" target="_blank">r/programming</a></li>
<li><a href="https://dzone.com/" target="_blank">DZone</a></li>
</ul>


<p>At the end of the day, it all comes down to the effort you're willing to put in.  But remember, learning to program leads to a new way to express yourself, which brings along many unexpected benefits and an open door to opportunity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Turn an Array Into a Hash Using Ruby]]></title>
    <link href="http://tibsar.github.io/blog/how-to-turn-an-array-into-a-hash-using-ruby/"/>
    <updated>2015-07-17T15:35:49-04:00</updated>
    <id>http://tibsar.github.io/blog/how-to-turn-an-array-into-a-hash-using-ruby</id>
    <content type="html"><![CDATA[<p>It seems like the hardest part of learning a language is knowing its tricks.  In Ruby, one of these tricks is turning an array into a hash.  So let's get started!</p>

<p>Suppose you have the following array:</p>

<pre><code class="ruby ">elegance_level = ["wedding", 10, "yacht", 10, "shack", 0, "wine", 8, "beer", 3, "cologne", 6]
</code></pre>

<p>This array seems to be assigning a level of elegance to the item before it, so a hash may be better suited for it.  You could iterate through the array and assign the values into a hash, however Ruby provides an easier way to accomplish this:</p>

<pre><code class="ruby ">Hash[*elegance_level]
 =&gt; {"wedding"=&gt;10, "yacht"=&gt;10, "shack"=&gt;0, "wine"=&gt;8, "beer"=&gt;3, "cologne"=&gt;6} 
</code></pre>

<p>That's it! Hope you enjoyed this short but sweet refactor tip!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Coding Bootcamps Are Like Greek Life]]></title>
    <link href="http://tibsar.github.io/blog/how-coding-bootcamps-are-like-greek-life/"/>
    <updated>2015-07-13T17:15:36-04:00</updated>
    <id>http://tibsar.github.io/blog/how-coding-bootcamps-are-like-greek-life</id>
    <content type="html"><![CDATA[<p>Coding bootcamps are popping up <a href="http://www.skilledup.com/articles/the-ultimate-guide-to-coding-bootcamps-the-exhaustive-list" target=_blank>across the world</a>.  As a student at a NYC bootcamp, the <a href="http://flatironschool.com/" target=_blank>Flatiron School</a>, as well as a sorority sister of <a href="https://www.dphie.org/Home" target=_blank>Delta Phi Epsilon</a>, I couldn't help but notice some similarities between the two.</p>

<h3>New Member Class</h3>

<p>Even if you don't know much about Greek Life, "pledge classes" are notorious. Now commonly referred to as a "new member class", this is a group of people working towards full membership of the sorority or fraternity. New member classes are encouraged to do everything with each other while they bond over the shared difficulty of balancing the time commitment, classes, and other life responsibilities.  I finished pledging by the spring semester of my freshman year, however I find myself repeating the experience in many ways at the Flatiron School.  Instead of a pledge class of college girls, I'm working with a cohort of men and women in all walks of life.  We all are working towards the common goal of graduation from the program as well as jobs in software development.  During this experience, we all have to balance the intense workload as well as commutes and real world responsibilities. In many ways, my cohort is my pledge class.</p>

<p><img class="center" src="https://scontent-lga1-1.xx.fbcdn.net/hphotos-xpf1/v/t1.0-9/1381481_732106783472536_1494142350_n.jpg?oh=130e32e1004e0c888cc99a607e733584&amp;oe=5625FD31" width="400" height="215"></p>

<h3>Mentorship</h3>

<p>One of the most exciting parts of pledging is getting a big.  This generally happens around halfway through the pledging process.  A big is expected to be a mentor to their little and support them through pledging and beyond. At the Flatiron School, we call this "mentorship".  In week 6, which is halfway through the bootcamp, we receive our mentors.  We can then contact our mentor via email and ask them questions about their experiences.  If they are local and available, we have the option of meeting with them in person as well. While this mentor is not as much of a physical presence as a big, their role is the same.  They share their experiences as someone that has previously experienced the long journey of becoming a developer and can be there to support their mentee through their journey.
<img class="center" src="https://scontent-lga1-1.xx.fbcdn.net/hphotos-xap1/v/t1.0-9/1425686_10151765451339499_2088666953_n.jpg?oh=5b79ce8958dca8bbaab83dfc796c4a35&amp;oe=56126F85" width="400" height="215"></p>

<h3>Getting Your Letters</h3>

<p>As a pledge class, we looked forward to the day that we would become full members and finally be able to wear letters.  It was a common part of conversation, as we would plan out what letters we would get and what fabric we would use to make them.  At the Flatiron School, my cohort is excited for the day we get our own Flatiron School hoodies (especially when the air conditioning is a tad too cold).  As a pledge, seeing the sisters wearing their letters was seen as something to work towards.  As a budding developer, seeing the TAs, faculty, and alumni wearing Flatiron gear is a push to keep working hard and a reminder that graduation isn't all that far off.</p>

<p><img class="center" src="http://themonogramexpress.com/images/thumbnails/rts233.jpg" width="400" height="215"></p>

<h3>Crossover</h3>

<p>As a new member, crossover is the ritual of rituals, the night that everyone has been waiting for, yet came as a surprise. When I was pledging, the date of crossover was kept a secret, so while we looked forward to it, we never knew quite when it would be.  However, when it came it was extremely exciting.  We were finally being accepted as full members of the organization that we had grown to adore.  At the Flatiron School, graduation holds a similar excitement.  While we know when we will be graduating, we can't help but get excited for crossing over from a Flatiron student to a Flatiron alumna.</p>

<p><img class="center" src="https://www.involvement.mtu.edu/images/native/0/noshadow/General/1c8e7ede684e43839507de555629904c.jpg" width="500"></p>

<h3>Conclusion</h3>

<p>Sorority life and bootcamp life aren't all that different.  Both involve a community of people looking out for each other. Both have new members that go through a journey towards a common goal.  Both encourage their members to be their best version of themselves. Personally, I think that's pretty neat.</p>
]]></content>
  </entry>
  
</feed>
